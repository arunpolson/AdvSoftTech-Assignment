{
    "sourceFile": "Frontend/src/app/services/user.service.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 17,
            "patches": [
                {
                    "date": 1740667805860,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740667857353,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,15 @@\n+import { Injectable } from '@angular/core';\r\n+import { HttpClient } from '@angular/common/http';\r\n+import { Observable } from 'rxjs';\r\n+import { User } from '../models/user.model';\r\n+\r\n @Injectable({\r\n     providedIn: 'root'\r\n })\r\n+\r\n+\r\n+\r\n export class UserService {\r\n \r\n     private apiUrl = 'https://api.example.com/users';\r\n \r\n"
                },
                {
                    "date": 1740667885748,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,38 @@\n+import { Injectable } from '@angular/core';\r\n+import { HttpClient } from '@angular/common/http';\r\n+import { Observable } from 'rxjs';\r\n+import { User } from '../models/user.model';\r\n+\r\n+@Injectable({\r\n+    providedIn: 'root'\r\n+})\r\n+\r\n+const userDictionary: { [key: number]: User } = {\r\n+    1: { id: 1, name: 'John Doe', email: 'john.doe@example.com' },\r\n+\r\n+export class UserService {\r\n+\r\n+    private apiUrl = 'https://api.example.com/users';\r\n+\r\n+    constructor(private http: HttpClient) { }\r\n+\r\n+    getUsers(): Observable<User[]> {\r\n+        return this.http.get<User[]>(this.apiUrl);\r\n+    }\r\n+\r\n+    getUserById(id: number): Observable<User> {\r\n+        return this.http.get<User>(`${this.apiUrl}/${id}`);\r\n+    }\r\n+\r\n+    createUser(user: User): Observable<User> {\r\n+        return this.http.post<User>(this.apiUrl, user);\r\n+    }\r\n+\r\n+    updateUser(id: number, user: User): Observable<User> {\r\n+        return this.http.put<User>(`${this.apiUrl}/${id}`, user);\r\n+    }\r\n+\r\n+    deleteUser(id: number): Observable<void> {\r\n+        return this.http.delete<void>(`${this.apiUrl}/${id}`);\r\n+    }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740667946979,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,68 +8,39 @@\n })\r\n \r\n const userDictionary: { [key: number]: User } = {\r\n     1: { id: 1, name: 'John Doe', email: 'john.doe@example.com' },\r\n+    2: { id: 2, name: 'Jane Smith', email: 'jane.smith@example.com' },\r\n+    3: { id: 3, name: 'Alice Johnson', email: 'alice.johnson@example.com' }\r\n+};\r\n \r\n export class UserService {\r\n \r\n     private apiUrl = 'https://api.example.com/users';\r\n \r\n     constructor(private http: HttpClient) { }\r\n \r\n     getUsers(): Observable<User[]> {\r\n-        return this.http.get<User[]>(this.apiUrl);\r\n+        return new Observable(observer => {\r\n+            observer.next(Object.values(userDictionary));\r\n+            observer.complete();\r\n+        });\r\n     }\r\n \r\n     getUserById(id: number): Observable<User> {\r\n-        return this.http.get<User>(`${this.apiUrl}/${id}`);\r\n+        return new Observable(observer => {\r\n+            const user = userDictionary[id];\r\n+            if (user) {\r\n+                observer.next(user);\r\n+            } else {\r\n+                observer.error(new Error('User not found'));\r\n+            }\r\n+            observer.complete();\r\n+        });\r\n     }\r\n \r\n     createUser(user: User): Observable<User> {\r\n-        return this.http.post<User>(this.apiUrl, user);\r\n-    }\r\n-\r\n-    updateUser(id: number, user: User): Observable<User> {\r\n-        return this.http.put<User>(`${this.apiUrl}/${id}`, user);\r\n-    }\r\n-\r\n-    deleteUser(id: number): Observable<void> {\r\n-        return this.http.delete<void>(`${this.apiUrl}/${id}`);\r\n-    }\r\n-}\n-import { Injectable } from '@angular/core';\r\n-import { HttpClient } from '@angular/common/http';\r\n-import { Observable } from 'rxjs';\r\n-import { User } from '../models/user.model';\r\n-\r\n-@Injectable({\r\n-    providedIn: 'root'\r\n-})\r\n-\r\n-\r\n-\r\n-export class UserService {\r\n-\r\n-    private apiUrl = 'https://api.example.com/users';\r\n-\r\n-    constructor(private http: HttpClient) { }\r\n-\r\n-    getUsers(): Observable<User[]> {\r\n-        return this.http.get<User[]>(this.apiUrl);\r\n-    }\r\n-\r\n-    getUserById(id: number): Observable<User> {\r\n-        return this.http.get<User>(`${this.apiUrl}/${id}`);\r\n-    }\r\n-\r\n-    createUser(user: User): Observable<User> {\r\n-        return this.http.post<User>(this.apiUrl, user);\r\n-    }\r\n-\r\n-    updateUser(id: number, user: User): Observable<User> {\r\n-        return this.http.put<User>(`${this.apiUrl}/${id}`, user);\r\n-    }\r\n-\r\n-    deleteUser(id: number): Observable<void> {\r\n-        return this.http.delete<void>(`${this.apiUrl}/${id}`);\r\n-    }\r\n+        return new Observable(observer => {\r\n+            const newId = Object.keys(userDictionary).length + 1;\r\n+            user.id = newId;\r\n+            userDictionary[newId] = user;\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740667954325,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,74 @@\n+import { Injectable } from '@angular/core';\r\n+import { HttpClient } from '@angular/common/http';\r\n+import { Observable } from 'rxjs';\r\n+import { User } from '../models/user.model';\r\n+\r\n+@Injectable({\r\n+    providedIn: 'root'\r\n+})\r\n+\r\n+const userDictionary: { [key: number]: User } = {\r\n+    1: { id: 1, name: 'John Doe', email: 'john.doe@example.com' },\r\n+    2: { id: 2, name: 'Jane Smith', email: 'jane.smith@example.com' },\r\n+    3: { id: 3, name: 'Alice Johnson', email: 'alice.johnson@example.com' }\r\n+};\r\n+\r\n+export class UserService {\r\n+\r\n+    private apiUrl = 'https://api.example.com/users';\r\n+\r\n+    constructor(private http: HttpClient) { }\r\n+\r\n+    getUsers(): Observable<User[]> {\r\n+        return new Observable(observer => {\r\n+            observer.next(Object.values(userDictionary));\r\n+            observer.complete();\r\n+        });\r\n+    }\r\n+\r\n+    getUserById(id: number): Observable<User> {\r\n+        return new Observable(observer => {\r\n+            const user = userDictionary[id];\r\n+            if (user) {\r\n+                observer.next(user);\r\n+            } else {\r\n+                observer.error(new Error('User not found'));\r\n+            }\r\n+            observer.complete();\r\n+        });\r\n+    }\r\n+\r\n+    createUser(user: User): Observable<User> {\r\n+        return new Observable(observer => {\r\n+            const newId = Object.keys(userDictionary).length + 1;\r\n+            user.id = newId;\r\n+            userDictionary[newId] = user;\r\n+            observer.next(user);\r\n+            observer.complete();\r\n+        });\r\n+    }\r\n+\r\n+    updateUser(id: number, user: User): Observable<User> {\r\n+        return new Observable(observer => {\r\n+            if (userDictionary[id]) {\r\n+                userDictionary[id] = user;\r\n+                observer.next(user);\r\n+            } else {\r\n+                observer.error(new Error('User not found'));\r\n+            }\r\n+            observer.complete();\r\n+        });\r\n+    }\r\n+\r\n+    deleteUser(id: number): Observable<void> {\r\n+        return new Observable(observer => {\r\n+            if (userDictionary[id]) {\r\n+                delete userDictionary[id];\r\n+                observer.next();\r\n+            } else {\r\n+                observer.error(new Error('User not found'));\r\n+            }\r\n+            observer.complete();\r\n+        });\r\n+    }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740667963328,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,73 @@\n+import { Injectable } from '@angular/core';\r\n+import { HttpClient } from '@angular/common/http';\r\n+import { Observable } from 'rxjs';\r\n+\r\n+@Injectable({\r\n+    providedIn: 'root'\r\n+})\r\n+\r\n+const userDictionary: { [key: number]: User } = {\r\n+    1: { id: 1, name: 'John Doe', email: 'john.doe@example.com' },\r\n+    2: { id: 2, name: 'Jane Smith', email: 'jane.smith@example.com' },\r\n+    3: { id: 3, name: 'Alice Johnson', email: 'alice.johnson@example.com' }\r\n+};\r\n+\r\n+export class UserService {\r\n+\r\n+    private apiUrl = 'https://api.example.com/users';\r\n+\r\n+    constructor(private http: HttpClient) { }\r\n+\r\n+    getUsers(): Observable<User[]> {\r\n+        return new Observable(observer => {\r\n+            observer.next(Object.values(userDictionary));\r\n+            observer.complete();\r\n+        });\r\n+    }\r\n+\r\n+    getUserById(id: number): Observable<User> {\r\n+        return new Observable(observer => {\r\n+            const user = userDictionary[id];\r\n+            if (user) {\r\n+                observer.next(user);\r\n+            } else {\r\n+                observer.error(new Error('User not found'));\r\n+            }\r\n+            observer.complete();\r\n+        });\r\n+    }\r\n+\r\n+    createUser(user: User): Observable<User> {\r\n+        return new Observable(observer => {\r\n+            const newId = Object.keys(userDictionary).length + 1;\r\n+            user.id = newId;\r\n+            userDictionary[newId] = user;\r\n+            observer.next(user);\r\n+            observer.complete();\r\n+        });\r\n+    }\r\n+\r\n+    updateUser(id: number, user: User): Observable<User> {\r\n+        return new Observable(observer => {\r\n+            if (userDictionary[id]) {\r\n+                userDictionary[id] = user;\r\n+                observer.next(user);\r\n+            } else {\r\n+                observer.error(new Error('User not found'));\r\n+            }\r\n+            observer.complete();\r\n+        });\r\n+    }\r\n+\r\n+    deleteUser(id: number): Observable<void> {\r\n+        return new Observable(observer => {\r\n+            if (userDictionary[id]) {\r\n+                delete userDictionary[id];\r\n+                observer.next();\r\n+            } else {\r\n+                observer.error(new Error('User not found'));\r\n+            }\r\n+            observer.complete();\r\n+        });\r\n+    }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740667970454,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,80 +1,7 @@\n import { Injectable } from '@angular/core';\r\n import { HttpClient } from '@angular/common/http';\r\n import { Observable } from 'rxjs';\r\n-\r\n-@Injectable({\r\n-    providedIn: 'root'\r\n-})\r\n-\r\n-const userDictionary: { [key: number]: User } = {\r\n-    1: { id: 1, name: 'John Doe', email: 'john.doe@example.com' },\r\n-    2: { id: 2, name: 'Jane Smith', email: 'jane.smith@example.com' },\r\n-    3: { id: 3, name: 'Alice Johnson', email: 'alice.johnson@example.com' }\r\n-};\r\n-\r\n-export class UserService {\r\n-\r\n-    private apiUrl = 'https://api.example.com/users';\r\n-\r\n-    constructor(private http: HttpClient) { }\r\n-\r\n-    getUsers(): Observable<User[]> {\r\n-        return new Observable(observer => {\r\n-            observer.next(Object.values(userDictionary));\r\n-            observer.complete();\r\n-        });\r\n-    }\r\n-\r\n-    getUserById(id: number): Observable<User> {\r\n-        return new Observable(observer => {\r\n-            const user = userDictionary[id];\r\n-            if (user) {\r\n-                observer.next(user);\r\n-            } else {\r\n-                observer.error(new Error('User not found'));\r\n-            }\r\n-            observer.complete();\r\n-        });\r\n-    }\r\n-\r\n-    createUser(user: User): Observable<User> {\r\n-        return new Observable(observer => {\r\n-            const newId = Object.keys(userDictionary).length + 1;\r\n-            user.id = newId;\r\n-            userDictionary[newId] = user;\r\n-            observer.next(user);\r\n-            observer.complete();\r\n-        });\r\n-    }\r\n-\r\n-    updateUser(id: number, user: User): Observable<User> {\r\n-        return new Observable(observer => {\r\n-            if (userDictionary[id]) {\r\n-                userDictionary[id] = user;\r\n-                observer.next(user);\r\n-            } else {\r\n-                observer.error(new Error('User not found'));\r\n-            }\r\n-            observer.complete();\r\n-        });\r\n-    }\r\n-\r\n-    deleteUser(id: number): Observable<void> {\r\n-        return new Observable(observer => {\r\n-            if (userDictionary[id]) {\r\n-                delete userDictionary[id];\r\n-                observer.next();\r\n-            } else {\r\n-                observer.error(new Error('User not found'));\r\n-            }\r\n-            observer.complete();\r\n-        });\r\n-    }\r\n-}\n-import { Injectable } from '@angular/core';\r\n-import { HttpClient } from '@angular/common/http';\r\n-import { Observable } from 'rxjs';\r\n import { User } from '../models/user.model';\r\n \r\n @Injectable({\r\n     providedIn: 'root'\r\n@@ -143,51 +70,5 @@\n             }\r\n             observer.complete();\r\n         });\r\n     }\r\n-}\n-import { Injectable } from '@angular/core';\r\n-import { HttpClient } from '@angular/common/http';\r\n-import { Observable } from 'rxjs';\r\n-import { User } from '../models/user.model';\r\n-\r\n-@Injectable({\r\n-    providedIn: 'root'\r\n-})\r\n-\r\n-const userDictionary: { [key: number]: User } = {\r\n-    1: { id: 1, name: 'John Doe', email: 'john.doe@example.com' },\r\n-    2: { id: 2, name: 'Jane Smith', email: 'jane.smith@example.com' },\r\n-    3: { id: 3, name: 'Alice Johnson', email: 'alice.johnson@example.com' }\r\n-};\r\n-\r\n-export class UserService {\r\n-\r\n-    private apiUrl = 'https://api.example.com/users';\r\n-\r\n-    constructor(private http: HttpClient) { }\r\n-\r\n-    getUsers(): Observable<User[]> {\r\n-        return new Observable(observer => {\r\n-            observer.next(Object.values(userDictionary));\r\n-            observer.complete();\r\n-        });\r\n-    }\r\n-\r\n-    getUserById(id: number): Observable<User> {\r\n-        return new Observable(observer => {\r\n-            const user = userDictionary[id];\r\n-            if (user) {\r\n-                observer.next(user);\r\n-            } else {\r\n-                observer.error(new Error('User not found'));\r\n-            }\r\n-            observer.complete();\r\n-        });\r\n-    }\r\n-\r\n-    createUser(user: User): Observable<User> {\r\n-        return new Observable(observer => {\r\n-            const newId = Object.keys(userDictionary).length + 1;\r\n-            user.id = newId;\r\n-            userDictionary[newId] = user;\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740667983793,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,12 @@\n import { Injectable } from '@angular/core';\r\n import { HttpClient } from '@angular/common/http';\r\n import { Observable } from 'rxjs';\r\n-import { User } from '../models/user.model';\r\n+interface User {\r\n+    id: number;\r\n+    name: string;\r\n+    email: string;\r\n+}\r\n \r\n @Injectable({\r\n     providedIn: 'root'\r\n })\r\n"
                },
                {
                    "date": 1740668015893,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,12 +6,8 @@\n     name: string;\r\n     email: string;\r\n }\r\n \r\n-@Injectable({\r\n-    providedIn: 'root'\r\n-})\r\n-\r\n const userDictionary: { [key: number]: User } = {\r\n     1: { id: 1, name: 'John Doe', email: 'john.doe@example.com' },\r\n     2: { id: 2, name: 'Jane Smith', email: 'jane.smith@example.com' },\r\n     3: { id: 3, name: 'Alice Johnson', email: 'alice.johnson@example.com' }\r\n@@ -20,9 +16,12 @@\n export class UserService {\r\n \r\n     private apiUrl = 'https://api.example.com/users';\r\n \r\n-    constructor(private http: HttpClient) { }\r\n+@Injectable({\r\n+    providedIn: 'root'\r\n+})\r\n+export class UserService {\r\n \r\n     getUsers(): Observable<User[]> {\r\n         return new Observable(observer => {\r\n             observer.next(Object.values(userDictionary));\r\n"
                },
                {
                    "date": 1740675437345,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,12 @@\n     name: string;\r\n     email: string;\r\n }\r\n \r\n+@Injectable({\r\n+    providedIn: 'root'\r\n+})\r\n+\r\n const userDictionary: { [key: number]: User } = {\r\n     1: { id: 1, name: 'John Doe', email: 'john.doe@example.com' },\r\n     2: { id: 2, name: 'Jane Smith', email: 'jane.smith@example.com' },\r\n     3: { id: 3, name: 'Alice Johnson', email: 'alice.johnson@example.com' }\r\n@@ -16,12 +20,9 @@\n export class UserService {\r\n \r\n     private apiUrl = 'https://api.example.com/users';\r\n \r\n-@Injectable({\r\n-    providedIn: 'root'\r\n-})\r\n-export class UserService {\r\n+    constructor(private http: HttpClient) { }\r\n \r\n     getUsers(): Observable<User[]> {\r\n         return new Observable(observer => {\r\n             observer.next(Object.values(userDictionary));\r\n"
                },
                {
                    "date": 1740675444029,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,12 +6,8 @@\n     name: string;\r\n     email: string;\r\n }\r\n \r\n-@Injectable({\r\n-    providedIn: 'root'\r\n-})\r\n-\r\n const userDictionary: { [key: number]: User } = {\r\n     1: { id: 1, name: 'John Doe', email: 'john.doe@example.com' },\r\n     2: { id: 2, name: 'Jane Smith', email: 'jane.smith@example.com' },\r\n     3: { id: 3, name: 'Alice Johnson', email: 'alice.johnson@example.com' }\r\n@@ -20,9 +16,12 @@\n export class UserService {\r\n \r\n     private apiUrl = 'https://api.example.com/users';\r\n \r\n-    constructor(private http: HttpClient) { }\r\n+@Injectable({\r\n+    providedIn: 'root'\r\n+})\r\n+export class UserService {\r\n \r\n     getUsers(): Observable<User[]> {\r\n         return new Observable(observer => {\r\n             observer.next(Object.values(userDictionary));\r\n"
                },
                {
                    "date": 1740675450272,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,12 @@\n     name: string;\r\n     email: string;\r\n }\r\n \r\n+@Injectable({\r\n+    providedIn: 'root'\r\n+})\r\n+\r\n const userDictionary: { [key: number]: User } = {\r\n     1: { id: 1, name: 'John Doe', email: 'john.doe@example.com' },\r\n     2: { id: 2, name: 'Jane Smith', email: 'jane.smith@example.com' },\r\n     3: { id: 3, name: 'Alice Johnson', email: 'alice.johnson@example.com' }\r\n@@ -16,12 +20,9 @@\n export class UserService {\r\n \r\n     private apiUrl = 'https://api.example.com/users';\r\n \r\n-@Injectable({\r\n-    providedIn: 'root'\r\n-})\r\n-export class UserService {\r\n+    constructor(private http: HttpClient) { }\r\n \r\n     getUsers(): Observable<User[]> {\r\n         return new Observable(observer => {\r\n             observer.next(Object.values(userDictionary));\r\n"
                },
                {
                    "date": 1740675474291,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,12 +6,8 @@\n     name: string;\r\n     email: string;\r\n }\r\n \r\n-@Injectable({\r\n-    providedIn: 'root'\r\n-})\r\n-\r\n const userDictionary: { [key: number]: User } = {\r\n     1: { id: 1, name: 'John Doe', email: 'john.doe@example.com' },\r\n     2: { id: 2, name: 'Jane Smith', email: 'jane.smith@example.com' },\r\n     3: { id: 3, name: 'Alice Johnson', email: 'alice.johnson@example.com' }\r\n@@ -20,9 +16,12 @@\n export class UserService {\r\n \r\n     private apiUrl = 'https://api.example.com/users';\r\n \r\n-    constructor(private http: HttpClient) { }\r\n+@Injectable({\r\n+    providedIn: 'root'\r\n+})\r\n+export class UserService {\r\n \r\n     getUsers(): Observable<User[]> {\r\n         return new Observable(observer => {\r\n             observer.next(Object.values(userDictionary));\r\n"
                },
                {
                    "date": 1740675484923,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,12 +15,8 @@\n \r\n export class UserService {\r\n \r\n     private apiUrl = 'https://api.example.com/users';\r\n-\r\n-@Injectable({\r\n-    providedIn: 'root'\r\n-})\r\n export class UserService {\r\n \r\n     getUsers(): Observable<User[]> {\r\n         return new Observable(observer => {\r\n"
                },
                {
                    "date": 1740675494031,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,10 +15,13 @@\n \r\n export class UserService {\r\n \r\n     private apiUrl = 'https://api.example.com/users';\r\n-export class UserService {\r\n \r\n+    @Injectable({\r\n+        providedIn: 'root'\r\n+    })\r\n+\r\n     getUsers(): Observable<User[]> {\r\n         return new Observable(observer => {\r\n             observer.next(Object.values(userDictionary));\r\n             observer.complete();\r\n"
                },
                {
                    "date": 1740675566389,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,8 +13,11 @@\n     3: { id: 3, name: 'Alice Johnson', email: 'alice.johnson@example.com' }\r\n };\r\n \r\n export class UserService {\r\n+    login(username: string, password: string) {\r\n+      throw new Error('Method not implemented.');\r\n+    }\r\n \r\n     private apiUrl = 'https://api.example.com/users';\r\n \r\n     @Injectable({\r\n"
                },
                {
                    "date": 1740675574616,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,12 +13,8 @@\n     3: { id: 3, name: 'Alice Johnson', email: 'alice.johnson@example.com' }\r\n };\r\n \r\n export class UserService {\r\n-    login(username: string, password: string) {\r\n-      throw new Error('Method not implemented.');\r\n-    }\r\n-\r\n     private apiUrl = 'https://api.example.com/users';\r\n \r\n     @Injectable({\r\n         providedIn: 'root'\r\n"
                },
                {
                    "date": 1740675607803,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n         providedIn: 'root'\r\n     })\r\n \r\n     login(username: string, password: string) {\r\n-        throw new Error('Method not implemented.');\r\n+        return true\r\n       }\r\n   \r\n   \r\n     getUsers(): Observable<User[]> {\r\n"
                }
            ],
            "date": 1740667805860,
            "name": "Commit-0",
            "content": "@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class UserService {\r\n\r\n    private apiUrl = 'https://api.example.com/users';\r\n\r\n    constructor(private http: HttpClient) { }\r\n\r\n    getUsers(): Observable<User[]> {\r\n        return this.http.get<User[]>(this.apiUrl);\r\n    }\r\n\r\n    getUserById(id: number): Observable<User> {\r\n        return this.http.get<User>(`${this.apiUrl}/${id}`);\r\n    }\r\n\r\n    createUser(user: User): Observable<User> {\r\n        return this.http.post<User>(this.apiUrl, user);\r\n    }\r\n\r\n    updateUser(id: number, user: User): Observable<User> {\r\n        return this.http.put<User>(`${this.apiUrl}/${id}`, user);\r\n    }\r\n\r\n    deleteUser(id: number): Observable<void> {\r\n        return this.http.delete<void>(`${this.apiUrl}/${id}`);\r\n    }\r\n}"
        }
    ]
}